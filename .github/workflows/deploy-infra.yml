name: Manually Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod

env:
  AWS_REGION: "us-east-2"
  IAM_ROLE_TO_ASSUME: "arn:aws:iam::481509955802:role/githubactions-radulupan-aws-fileshare-plus-role"

permissions:
  id-token: write
  contents: read

jobs:
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    env:
      TF_ENV: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Lambda Deployment Package
        run: |
          cd terraform/modules/cognito-user-management
          zip add_to_group.zip add_to_group.py
          zip auto_confirm_user.zip auto_confirm_user.py

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.5 

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.IAM_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform -chdir=terraform/environments/${{ env.TF_ENV }} init

      - name: Terraform Plan
        run: terraform -chdir=terraform/environments/${{ env.TF_ENV }} plan -out=tfplan -var-file=${{ env.TF_ENV }}.tfvars      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ github.event.inputs.environment }}
          path: terraform/environments/${{ env.TF_ENV }}/tfplan

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: plan
    env:
      TF_ENV: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Lambda Deployment Package
        run: |
          cd terraform/modules/cognito-user-management
          zip add_to_group.zip add_to_group.py
          zip auto_confirm_user.zip auto_confirm_user.py

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.5 

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.IAM_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ github.event.inputs.environment }}
          path: terraform/environments/${{ env.TF_ENV }}

      - name: Terraform Init
        run: terraform -chdir=terraform/environments/${{ env.TF_ENV }} init

      - name: Terraform Apply
        run: terraform -chdir=terraform/environments/${{ env.TF_ENV }} apply -auto-approve tfplan

      - name: Write Terraform Outputs to SSM Parameter Store
        id: ssm-outputs
        run: |
          echo "Writing Terraform outputs to SSM Parameter Store..."
          
          # Change directory to where the state file is
          cd terraform/environments/${{ env.TF_ENV }}

          # A more robust way to loop through the raw output names
          terraform output -json | jq -r 'keys_unsorted[]' | while read -r OUTPUT_NAME; do
            # Get the value of the specific output, ensuring the name is quoted for the command
            VALUE=$(terraform output -raw "$OUTPUT_NAME")
            # Construct the SSM parameter name hierarchically
            PARAM_NAME="/fileshare/${{ env.TF_ENV }}/${OUTPUT_NAME}"
            
            echo "Writing $PARAM_NAME with value: $VALUE"
            aws ssm put-parameter --name "$PARAM_NAME" --value "$VALUE" --type String --overwrite
          done
