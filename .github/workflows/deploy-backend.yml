# .github/workflows/deploy-backend.yml

name: Manually Deploy Backend

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy from'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - main

# NOTE: This env block is now much smaller.
# It only contains global values, not environment-specific ones.
env:
  AWS_REGION: "us-east-2"
  ECR_REPOSITORY_NAME: "file-sharing-app-radulupan-test"
  IAM_ROLE_TO_ASSUME: "arn:aws:iam::481509955802:role/githubactions-radulupan-aws-fileshare-plus-role"

permissions:
  id-token: write # Required for OIDC authentication with AWS
  contents: read # Required for actions/checkout

jobs:
  deploy:
    name: Build and Deploy Backend
    runs-on: ubuntu-latest
    env:
      TARGET_ENV: ${{ github.event.inputs.branch == 'main' && 'prod' || 'dev' }}
    steps:
      # --- THIS IS THE NEW FIRST STEP ---
      - name: Fetch Configuration from SSM
        id: get-config
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.IAM_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
          # This command uses the AWS CLI to get parameters from SSM
          # and makes them available as environment variables for all subsequent steps.
          mask-aws-account-id: 'false'
        env:
          AWS_SSM_PATH: /fileshare/${{ github.event.inputs.branch == 'main' && 'prod' || 'dev' }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.IAM_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          # The primary tag is the unique Git SHA for perfect traceability
		  COMMIT_SHA_TAG: ${{ github.sha }}
          # The pointer tag is the branch name, which Terraform uses
		  BRANCH_TAG: ${{ github.event.inputs.branch }}
        run: |
          cd backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$COMMIT_SHA_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$COMMIT_SHA_TAG $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$BRANCH_TAG
          echo "Pushing tag: $COMMIT_SHA_TAG"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$COMMIT_SHA_TAG
          echo "Pushing tag: $BRANCH_TAG"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$BRANCH_TAG

      - name: Update ECS Service
        # NOTE: ECS_CLUSTER and ECS_SERVICE are no longer set here.
        # They now come directly from the SSM step above.
        run: |
          echo "Deploying to the ${{ env.TARGET_ENV }} environment..."
          echo "Using Cluster: ${{ env.ECS_CLUSTER_NAME }}"
          echo "Updating Service: ${{ env.ECS_SERVICE_NAME }}"
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER_NAME }} --service ${{ env.ECS_SERVICE_NAME }} --force-new-deployment

