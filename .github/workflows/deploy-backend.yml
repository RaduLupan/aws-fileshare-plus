# .github/workflows/deploy-backend.yml

name: Manually Deploy Backend

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy from'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - main

# NOTE: This env block only contains global values.
env:
  AWS_REGION: "us-east-2"
  ECR_REPOSITORY_NAME: "file-sharing-app-radulupan-test"
  IAM_ROLE_TO_ASSUME: "arn:aws:iam::481509955802:role/githubactions-radulupan-aws-fileshare-plus-role"

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Build and Deploy Backend
    runs-on: ubuntu-latest
    env:
      TARGET_ENV: ${{ github.event.inputs.branch == 'main' && 'prod' || 'dev' }}
    steps:
      # --- STEP 1: Configure credentials ---
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.IAM_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: 'false'

      # --- STEP 2: Explicitly fetch SSM parameters (SIMPLIFIED SCRIPT) ---
      - name: Fetch Configuration from SSM Parameter Store
        run: |
          echo "Fetching config for ${{ env.TARGET_ENV }} from path /fileshare/${{ env.TARGET_ENV }}"
          
          # Fetch the parameters as JSON
          PARAMS_JSON=$(aws ssm get-parameters-by-path --path "/fileshare/${{ env.TARGET_ENV }}" --query "Parameters[*]" --output json)
          
          # Check if any parameters were returned
          if [ -z "$PARAMS_JSON" ] || [ "$PARAMS_JSON" == "[]" ]; then
            echo "No parameters found at the specified path."
            exit 1
          fi

          # Loop through each parameter in the JSON array
          echo "$PARAMS_JSON" | jq -c '.[]' | while read -r line; do
            # Extract the full name and value
            PARAM_NAME=$(echo "$line" | jq -r '.Name')
            PARAM_VALUE=$(echo "$line" | jq -r '.Value')

            # Get the short name by removing the prefix (e.g., ecs_cluster_name)
            VAR_NAME_LOWER=$(basename "$PARAM_NAME")

            # Convert the short name to uppercase (e.g., ECS_CLUSTER_NAME)
            VAR_NAME_UPPER=$(echo "$VAR_NAME_LOWER" | tr '[:lower:]' '[:upper:]')
            
            # Print a debug message showing what will be exported
            echo "Exporting: ${VAR_NAME_UPPER}=${PARAM_VALUE}"

            # Append the export command to the GitHub environment file
            echo "${VAR_NAME_UPPER}=${PARAM_VALUE}" >> $GITHUB_ENV
          done

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          COMMIT_SHA_TAG: ${{ github.sha }}
          BRANCH_TAG: ${{ github.event.inputs.branch }}
        run: |
          cd backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$COMMIT_SHA_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$COMMIT_SHA_TAG $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$BRANCH_TAG
          echo "Pushing tag: $COMMIT_SHA_TAG"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$COMMIT_SHA_TAG
          echo "Pushing tag: $BRANCH_TAG"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$BRANCH_TAG

      - name: Update ECS Service
        run: |
          echo "Deploying to the ${{ env.TARGET_ENV }} environment..."
          echo "Using Cluster: ${{ env.ECS_CLUSTER_NAME }}"
          echo "Updating Service: ${{ env.ECS_SERVICE_NAME }}"
          aws ecs update-service --cluster "${{ env.ECS_CLUSTER_NAME }}" --service "${{ env.ECS_SERVICE_NAME }}" --force-new-deployment

