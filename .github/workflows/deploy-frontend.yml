# .github/workflows/deploy-frontend.yml

name: Manually Deploy Frontend

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy from'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - main

# NOTE: This env block only contains global and non-environment-specific values.
env:
  AWS_REGION: "us-east-2"
  IAM_ROLE_TO_ASSUME: "arn:aws:iam::481509955802:role/githubactions-radulupan-aws-fileshare-plus-role"

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest
    env:
      TARGET_ENV: ${{ github.event.inputs.branch == 'main' && 'prod' || 'dev' }}
    steps:
      # --- STEP 1: Configure credentials ---
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.IAM_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: 'false'

      # --- STEP 2: Explicitly fetch SSM parameters ---
      - name: Fetch Configuration from SSM Parameter Store
        run: |
          echo "Fetching config for ${{ env.TARGET_ENV }} from path /fileshare/${{ env.TARGET_ENV }}"
          
          # Fetch the parameters as JSON
          PARAMS_JSON=$(aws ssm get-parameters-by-path --path "/fileshare/${{ env.TARGET_ENV }}" --query "Parameters[*]" --output json)
          
          # Check if any parameters were returned
          if [ -z "$PARAMS_JSON" ] || [ "$PARAMS_JSON" == "[]" ]; then
            echo "No parameters found at the specified path."
            exit 1
          fi

          # Loop through each parameter in the JSON array
          echo "$PARAMS_JSON" | jq -c '.[]' | while read -r line; do
            # Extract the full name and value
            PARAM_NAME=$(echo "$line" | jq -r '.Name')
            PARAM_VALUE=$(echo "$line" | jq -r '.Value')

            # Get the short name by removing the prefix (e.g., frontend_s3_bucket)
            VAR_NAME_LOWER=$(basename "$PARAM_NAME")

            # Convert the short name to uppercase (e.g., FRONTEND_S3_BUCKET)
            VAR_NAME_UPPER=$(echo "$VAR_NAME_LOWER" | tr '[:lower:]' '[:upper:]')
            
            # Print a debug message showing what will be exported
            echo "Exporting: ${VAR_NAME_UPPER}=${PARAM_VALUE}"

            # Append the export command to the GitHub environment file
            echo "${VAR_NAME_UPPER}=${PARAM_VALUE}" >> $GITHUB_ENV
          done

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies and build
        run: |
          cd frontend
          npm ci
          # The REACT_APP_BACKEND_API_URL is now read from SSM
          npm run build
        env:
          # This value is now dynamically set from the SSM parameter 'FRONTEND_CLOUDFRONT_URL'
          # Assuming you have an output in terraform named 'frontend_cloudfront_url'
          REACT_APP_BACKEND_API_URL: ${{ env.FRONTEND_CLOUDFRONT_URL }}

      - name: Deploy static site to S3
        run: |
          echo "Deploying to the ${{ env.TARGET_ENV }} environment..."
          # Note: The bucket name now comes from the SSM parameter 'S3_REACT_BUCKET'
          aws s3 sync ./frontend/build s3://${{ env.S3_REACT_BUCKET }} --delete

      - name: Invalidate CloudFront cache
        run: |
          # Note: The distribution ID now comes from the SSM parameter 'CLOUDFRONT_DISTRIBUTION_ID'
          aws cloudfront create-invalidation --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
